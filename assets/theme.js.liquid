// Also, $.flexslider, $.zoom, $.magnificPopup, $.dropkick, $.stick
(function($, enquire, _, FastClick, imagesLoaded, respond, Vimeo, undefined){

  /* Simple jQuery Equal Heights @version 1.5.1. Copyright (c) 2013 Matt Banks. Dual licensed under the MIT and GPL licenses. */
  !function(a){a.fn.equalHeights=function(){var b=0,c=a(this);return c.each(function(){var c=a(this).innerHeight();c>b&&(b=c)}),c.css("height",b)},a("[data-equal]").each(function(){var b=a(this),c=b.data("equal");b.find(c).equalHeights()})}(jQuery);

  /* Run function after window resize */
  var afterResize=(function(){var t={};return function(callback,ms,uniqueId){if(!uniqueId){uniqueId="Don't call this twice without a uniqueId";}if(t[uniqueId]){clearTimeout(t[uniqueId]);}t[uniqueId]=setTimeout(callback,ms);};})();

  window.theme = window.theme || {};

  /*================ TIMBER ================*/
  // Helper functions
  function replaceUrlParam(url, paramName, paramValue) {
    var pattern = new RegExp('('+paramName+'=).*?(&|$)'),
        newUrl = url.replace(pattern,'$1' + paramValue + '$2');
    if ( newUrl == url ) {
      newUrl = newUrl + (newUrl.indexOf('?')>0 ? '&' : '?') + paramName + '=' + paramValue;
    }
    return newUrl;
  }

  // Timber functions
  window.timber = window.timber || {};

  timber.cacheSelectors = function () {
    timber.cache = {
      // General
      $html: $('html'),
      $body: $('body'),

      // Navigation
      $navigation: $('#AccessibleNav')
    }
  };

  timber.init = function () {
    FastClick.attach(document.body);
    timber.cacheSelectors();
    timber.accessibleNav();
    timber.autoResponsiveElements();
  };

  timber.accessibleNav = function () {
    var $nav = timber.cache.$navigation,
        $allLinks = $nav.find('a'),
        $topLevel = $nav.children('li').find('a'),
        $parents = $nav.find('.site-nav--has-dropdown'),
        $subMenuLinks = $nav.find('.site-nav__dropdown').find('a'),
        activeClass = 'nav-hover',
        focusClass = 'nav-focus';

    // Mouseenter
    $parents.on('mouseenter touchstart', function(evt) {
      var $el = $(this);

      if (!$el.hasClass(activeClass)) {
        evt.preventDefault();
      }

      showDropdown($el);
    });

    // Mouseout
    $parents.on('mouseleave', function() {
      hideDropdown($(this));
    });

    $subMenuLinks.on('touchstart', function(evt) {
      // Prevent touchstart on body from firing instead of link
      evt.stopImmediatePropagation();
    });

    $allLinks.focus(function() {
      handleFocus($(this));
    });

    $allLinks.blur(function() {
      removeFocus($topLevel);
    });

    // accessibleNav private methods
    function handleFocus ($el) {
      var $subMenu = $el.next('ul'),
          hasSubMenu = $subMenu.hasClass('sub-nav') ? true : false,
          isSubItem = $('.site-nav__dropdown').has($el).length,
          $newFocus = null;

      // Add focus class for top level items, or keep menu shown
      if (!isSubItem) {
        removeFocus($topLevel);
        addFocus($el);
      } else {
        $newFocus = $el.closest('.site-nav--has-dropdown').find('a');
        addFocus($newFocus);
      }
    }

    function showDropdown ($el) {
      $el.addClass(activeClass);

      setTimeout(function() {
        timber.cache.$body.on('touchstart', function() {
          hideDropdown($el);
        });
      }, 250);
    }

    function hideDropdown ($el) {
      $el.removeClass(activeClass);
      timber.cache.$body.off('touchstart');
    }

    function addFocus ($el) {
      $el.addClass(focusClass);
    }

    function removeFocus ($el) {
      $el.removeClass(focusClass);
    }
  };

  timber.autoResponsiveElements = function () {
    var $iframeVideo = $('iframe[src*="youtube.com/embed"], iframe[src*="player.vimeo"]');
    var $iframeReset = $iframeVideo.add('iframe#admin_bar_iframe');

    $('table').wrap('<div class="table-wrapper"></div>');

    $iframeVideo.each(function () {
      // Add wrapper to make video responsive
      if(!$(this).parents('.video-wrapper').length) {
        $(this).wrap('<div class="video-wrapper"></div>');
      }
    });

    $iframeReset.each(function () {
      // Re-set the src attribute on each iframe after page load
      // for Chrome's "incorrect iFrame content on 'back'" bug.
      // https://code.google.com/p/chromium/issues/detail?id=395791
      // Need to specifically target video and admin bar
      this.src = this.src;
    });
  };

  // Initialize Timber's JS on docready
  $(timber.init)


  /* ================ SLATE ================ */
  theme.Sections = function Sections() {
    this.constructors = {};
    this.instances = [];

    $(document)
      .on('shopify:section:load', this._onSectionLoad.bind(this))
      .on('shopify:section:unload', this._onSectionUnload.bind(this))
      .on('shopify:section:select', this._onSelect.bind(this))
      .on('shopify:section:deselect', this._onDeselect.bind(this))
      .on('shopify:block:select', this._onBlockSelect.bind(this))
      .on('shopify:block:deselect', this._onBlockDeselect.bind(this));
  };

  theme.Sections.prototype = _.assignIn({}, theme.Sections.prototype, {
    _createInstance: function(container, constructor) {
      var $container = $(container);
      var id = $container.attr('data-section-id');
      var type = $container.attr('data-section-type');

      constructor = constructor || this.constructors[type];

      if (_.isUndefined(constructor)) {
        return;
      }

      var instance = _.assignIn(new constructor(container), {
        id: id,
        type: type,
        container: container
      });

      this.instances.push(instance);
    },

    _onSectionLoad: function(evt) {
      var container = $('[data-section-id]', evt.target)[0];
      if (container) {
        this._createInstance(container);
      }
    },

    _onSectionUnload: function(evt) {
      this.instances = _.filter(this.instances, function(instance) {
        var isEventInstance = (instance.id === evt.detail.sectionId);

        if (isEventInstance) {
          if (_.isFunction(instance.onUnload)) {
            instance.onUnload(evt);
          }
        }

        return !isEventInstance;
      });
    },

    _onSelect: function(evt) {
      // eslint-disable-next-line no-shadow
      var instance = _.find(this.instances, function(instance) {
        return instance.id === evt.detail.sectionId;
      });

      if (!_.isUndefined(instance) && _.isFunction(instance.onSelect)) {
        instance.onSelect(evt);
      }
    },

    _onDeselect: function(evt) {
      // eslint-disable-next-line no-shadow
      var instance = _.find(this.instances, function(instance) {
        return instance.id === evt.detail.sectionId;
      });

      if (!_.isUndefined(instance) && _.isFunction(instance.onDeselect)) {
        instance.onDeselect(evt);
      }
    },

    _onBlockSelect: function(evt) {
      // eslint-disable-next-line no-shadow
      var instance = _.find(this.instances, function(instance) {
        return instance.id === evt.detail.sectionId;
      });

      if (!_.isUndefined(instance) && _.isFunction(instance.onBlockSelect)) {
        instance.onBlockSelect(evt);
      }
    },

    _onBlockDeselect: function(evt) {
      // eslint-disable-next-line no-shadow
      var instance = _.find(this.instances, function(instance) {
        return instance.id === evt.detail.sectionId;
      });

      if (!_.isUndefined(instance) && _.isFunction(instance.onBlockDeselect)) {
        instance.onBlockDeselect(evt);
      }
    },

    register: function(type, constructor) {
      this.constructors[type] = constructor;

      $('[data-section-type=' + type + ']').each(function(index, container) {
        this._createInstance(container, constructor);
      }.bind(this));
    }
  });


  /* ================ MODULES ================ */
  theme.Hero = (function() {
    theme.sliders = function (slider) {
      this.$slider = $(slider);
      this.sliderArgs = {
        animation: this.$slider.data('transition'),
        animationSpeed: 500,
        pauseOnHover: true,
        keyboard: false,
        slideshow: this.$slider.data('autoplay'),
        slideshowSpeed: this.$slider.data('speed'),
        controlNav: this.$slider.data('show-dots'),
        smoothHeight: true,
        before: function(slider) {
          $(slider).resize();
        }
      }

      if (this.$slider.length) {

        if (this.$slider.find('li').length === 1) {
          this.sliderArgs.slideshow = false;
          this.sliderArgs.slideshowSpeed = 0;
          this.sliderArgs.controlNav = false;
          this.sliderArgs.directionNav = false;
          this.sliderArgs.touch = false;
        }

        return(this.$slider.flexslider(this.sliderArgs));
      }
    };
    
    return theme.sliders;
  })();


  /*================ SECTIONS ================*/
  theme.Product = (function() {
    function Product(container) {
      this.$container = $(container);
      var sectionId = this.$container.attr('data-section-id');

      this.selectors = {
        productImage: '#ProductPhotoImg',
        productImageGallery: '.gallery__item',
        productImageWrap: '#ProductPhoto',
        thumbImages: '#ProductThumbs',
        productGridImages: '.grid-link__image--product',
        addToCart: '#AddToCart',
        productPrice: '#ProductPrice',
        comparePrice: '#ComparePrice',
        comparePriceA11y: '#ComparePriceA11y',
        priceA11y: '#PriceA11y',
        quantityElements: '.quantity-selector, label + .js-qty',
        addToCartText: '#AddToCartText',
        SKU: '.variant-sku'
      };

      if (!$('#ProductJson-' + sectionId).html()) {
        return;
      }

      this.zoomType = this.$container.data('image-zoom-type');
      this.$productGridImages = $(this.selectors.productGridImages, this.$container);

      this.productSingleObject = JSON.parse(document.getElementById('ProductJson-' + sectionId).innerHTML);

      this.init();
    }

    Product.prototype = _.assignIn({}, Product.prototype, {
      init: function(){
        this.stringOverrides();
        this.cacheSelectors();
        this.initBreakpoints();
        this.initProductVariant();
        this.productImageSwitch();
        this.productImageSticky();
        timber.autoResponsiveElements();

        if (this.zoomType == 'lightbox') {
          this.productImageGallery();
        } else if (this.zoomType =='zoom-in') {
          productImageZoom();
        }
      },

      stringOverrides: function() {
        // Override defaults in theme.strings with potential
        // template overrides

        theme.productStrings = theme.productStrings || {};
        $.extend(theme.strings, theme.productStrings);
      },

      cacheSelectors: function() {
        window.cache = window.cache || {};
        $.extend(window.cache, {
          $html: $('html'),
          $productImage: $(this.selectors.productImage),
          $productImageGallery: $(this.selectors.productImageGallery),
          $productImageWrap: $(this.selectors.productImageWrap),
          $thumbImages: $(this.selectors.thumbImages).find('a.product-single__thumbnail'),
          $addToCart: $(this.selectors.addToCart),
          $productPrice: $(this.selectors.productPrice),
          $comparePrice: $(this.selectors.comparePrice),
          $comparePriceA11y: $(this.selectors.comparePriceA11y),
          $priceA11y: $(this.selectors.priceA11y),
          $quantityElements: $(this.selectors.quantityElements),
          $addToCartText: $(this.selectors.addToCartText),
          $SKU: $(this.selectors.SKU)
        });
      },

      initBreakpoints: function() {
        var self = this;
        var zoomType = $('#ProductSection').data('image-zoom-type');

        if (!cache.$html.hasClass('lt-ie9')) {
          enquire.register(theme.variables.mediaQueryMedium, {
            match: function() {
              if (zoomType == 'zoom-in') {
                if (cache.$productImageWrap.length) {
                  // remove event handlers for product zoom on mobile
                  cache.$productImageWrap.trigger('zoom.destroy');
                  cache.$productImageWrap.off();
                  cache.$productImageWrap.removeClass('image-zoom');
                }
              } else if (zoomType == 'lightbox') {
                // remove event handlers for lightbox on mobile
                cache.$productImageGallery.off();
                cache.$productImage.removeClass('zoom-lightbox');
              }

              self.productImageStickyDestroy();
              theme.variables.bpSmall = true;
            },
            unmatch: function() {
              theme.variables.bpSmall = false;
              if (zoomType == 'zoom-in') {
                // reinit product zoom
                productImageZoom();
              } else if (zoomType == 'lightbox') {
                // reinit lightbox
                cache.$productImage.addClass('zoom-lightbox');
                self.productImageGallery();
              }

              self.productImageSticky();
            }
          });
        }
        $(window).on('resize.product.sticky', this.stickyOnResize.bind(this));
      },

      productImageGallery: function() {
        if (!theme.variables.bpSmall) {
          if (!cache.$productImageGallery.length) {
            return;
          };

          cache.$productImageGallery.magnificPopup({
            type: 'image',
            mainClass: 'mfp-fade',
            closeOnBgClick: true,
            closeBtnInside: false,
            closeOnContentClick: true,
            tClose: theme.strings.zoomClose,
            removalDelay: 500,
            callbacks: {
              open: function(){
                $('html').css('overflow-y','hidden');
              },
              close: function(){
                $('html').css('overflow-y','');
              }
            },
            gallery: {
              enabled: true,
              navigateByImgClick: false,
              arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"><span class="mfp-chevron mfp-chevron-%dir%"></span></button>',
              tPrev: theme.strings.zoomPrev,
              tNext: theme.strings.zoomNext
            }
          });

          cache.$productImage.bind('click', function() {
            var imageId = $(this).attr('data-image-id');
            cache.$productImageGallery.filter('[data-image-id="' + imageId + '"]').trigger('click');
          });
        }
      },

      productImageSwitch: function() {
        if (!cache.$thumbImages.length) {
          return;
        }

        var self = this;

        // Switch the main image with one of the thumbnails
        // Note: this does not change the variant selected, just the image
        cache.$thumbImages.on('click', function(evt) {
          evt.preventDefault();
          var newImage = $(this).attr('href');
          var newImageId = $(this).attr('data-image-id');
          self.switchImage(newImage, { id: newImageId }, cache.$productImage);
        });
      },

      productImageFitsInUsableViewport: function(){
        var topPadding = this.getStickyTopPadding();
        var usableHeight = window.innerHeight; // - $('header').outerHeight();
        return (cache.$productImageWrap.outerHeight() + topPadding <= usableHeight);
      },

      getStickyTopPadding: function(){
        return 60;
      },

      getStickyBottomPadding: function(){
        var body = document.body;
        var html = document.documentElement;
        var docHeight = Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight );
        var wrapper = cache.$productImageWrap.parents('.main-content').find('.wrapper').first().get(0);
        return docHeight - (wrapper.offsetTop + wrapper.offsetHeight);
      },

      isSticky: function(){
        return cache.$productImageWrap.parents('.sticky-wrapper').length
      },

      stickyOnResize: function(){
        if(theme.variables.bpSmall){
          return;
        }
        if(!this.productImageFitsInUsableViewport()){
          this.productImageStickyDestroy();
        }
        else {
          if(!this.isSticky()){
            this.productImageSticky();
          }
        }
      },

      productImageSticky: function(){
        if(theme.variables.bpSmall || !cache.$productImageWrap.length || this.isSticky() || !this.productImageFitsInUsableViewport()){
          return;          
        }
        
        cache.$productImageWrap.unstick(); // Kill sticky in case it was already initialized
        cache.$productImageWrap.sticky({
          topSpacing: this.getStickyTopPadding(),
          bottomSpacing: this.getStickyBottomPadding()
        });

        cache.$productImageWrap.sticky('update');
      },

      productImageStickyDestroy: function(){
        if (!cache.$productImageWrap.length) {
          return;
        };
        cache.$productImageWrap.unstick();
      },

      initProductVariant: function() {
        var self = this;
        var product = this.productSingleObject;

        var selectCallback = function(variant, selector) {
          self.productPage({
            money_format: theme.moneyFormat,
            variant: variant,
            selector: selector,
            translations: {
              add_to_cart : theme.productStrings.addToCart,
              sold_out : theme.productStrings.soldOut,
              unavailable : theme.productStrings.unavailable
            }
          });
        };

        $('#productSelect').wrap('<div class="grid"></div>');

        this.optionSelector = new Shopify.OptionSelectors('productSelect', {
          product: product,
          onVariantSelected: selectCallback,
          enableHistoryState: true
        });

        $('.selector-wrapper').wrap('<div class="grid__item post-large--one-half medium--one-half"></div>');

        $('.selector-wrapper').each(function(index, el) {

          $(this).find('.single-option-selector').dropkick({
            mobile: true
          });

        });

        // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
        if (product.options.length == 1 && product.options[0] != 'Title') {
          $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">' + product.options[0] + '</label>');
        }

        // Hide selectors if we only have 1 variant and its title contains 'Default'.
        if (product.variants.length == 1 && product.variants[0].title.toLowerCase().indexOf('default') !== -1) {
          $('.selector-wrapper').hide();
        }
      },

      productPage: function (options) {
        var self = this;
        var moneyFormat = options.money_format;
        var variant = options.variant;
        var selector = options.selector;
        var translations = options.translations;

        if (variant) {

          // Update variant image, if one is set
          if (variant.featured_image) {
            var newImg = variant.featured_image,
                el = cache.$productImage[0];
            Shopify.Image.switchImage(newImg, el, self.switchImage);
          }

          // Select a valid variant if available
          if (variant.available) {
            // Available, enable the submit button, change text, show quantity elements
            cache.$addToCart.removeClass('disabled').prop('disabled', false);
            cache.$addToCartText.html(translations.add_to_cart);
            cache.$quantityElements.show();
          } else {
            // Sold out, disable the submit button, change text, hide quantity elements
            cache.$addToCart.addClass('disabled').prop('disabled', true);
            cache.$addToCartText.html(translations.sold_out);
            cache.$quantityElements.hide();
          }

          // Regardless of stock, update the product price
          cache.$productPrice.html( Shopify.formatMoney(variant.price, moneyFormat) );

          // Show SKU
          cache.$SKU.html(variant.sku);

          // Also update and show the product's compare price if necessary
          if (variant.compare_at_price > variant.price) {
            cache.$comparePrice
              .html(Shopify.formatMoney(variant.compare_at_price, moneyFormat))
              .show();
            cache.$comparePriceA11y.attr('aria-hidden', 'false');
            cache.$priceA11y.attr('aria-hidden', 'false');
          } else {
            cache.$comparePrice.hide();
            cache.$comparePriceA11y.attr('aria-hidden', 'true');
          }

        } else {
          // The variant doesn't exist, disable submit button.
          // This may be an error or notice that a specific variant is not available.
          // To only show available variants, implement linked product options:
          //   - http://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options
          cache.$addToCart.addClass('disabled').prop('disabled', true);
          cache.$addToCartText.html(translations.unavailable);
          cache.$quantityElements.hide();
        }
      },

      switchImage: function (src, imgObject, el) {
        var zoomType = $('#ProductSection').data('image-zoom-type');
        // Make sure element is a jquery object
        var $el = $(el);
        $el.attr('src', src);
        $el.attr('data-image-id', imgObject.id);

        if (!theme.variables.bpSmall && zoomType == 'zoom-in') {
          // Update new image src to grande
          var zoomSrc = src.replace('_medium.','_1024x1024.').replace('_large.','_1024x1024.').replace('_grande.','_1024x1024.');
          $el.attr('data-zoom', zoomSrc);

          $(function() {
            productImageZoom();
          });
        }
      }
    });

    function productImageZoom () {
      var zoomType = $('#ProductSection').data('image-zoom-type');

      if (!theme.variables.bpSmall && zoomType == 'zoom-in'){
        if (!cache.$productImageWrap.length || cache.$html.hasClass('supports-touch')) {
          return;
        };

        // Destroy zoom (in case it was already set), then set it up again
        cache.$productImageWrap.trigger('zoom.destroy');

        cache.$productImageWrap.addClass('image-zoom').zoom({
          url: cache.$productImage.attr('data-zoom')
        });
      }
    }

    return Product;
  })();

  theme.Collection = (function() {
    function Collection(container) {
      this.$container = $(container);
      var id = this.$container.attr('data-section-id');

      this.selectors = {
        productGridImages: '.grid-link__image--product'
      };

      this.sortEnabled = this.$container.data('sort-enabled');
      this.tagsEnabled = this.$container.data('tags-enabled');

      this.$productGridImages = $(this.selectors.productGridImages, this.$container);

      this.init();
    }

    Collection.prototype = _.assignIn({}, Collection.prototype, {
      init: function(){
        this.stringOverrides();
        theme.cacheSelectors();
        theme.equalHeights(this.$productGridImages);

        if (this.sortEnabled) {
          this.collectionSorting();
        }

        if (this.tagsEnabled) {
          this.collectionTags();
        }
      },

      stringOverrides: function() {
        // Override defaults in theme.strings with potential
        // template overrides

        theme.productStrings = theme.productStrings || {};
        $.extend(theme.strings, theme.productStrings);
      },

      collectionSorting: function() {
        /*============================================================================
          Initialised here because collection liquid object is only available
          on collection pages, and not external JS files
        ==============================================================================*/
        Shopify.queryParams = {};
        if (location.search.length && location.search.indexOf("sort_by")) {
          for (var aKeyValue, i = 0, aCouples = location.search.substr(1).split('&'); i < aCouples.length; i++) {
            aKeyValue = aCouples[i].split('=');
            if (aKeyValue.length > 1) {
              Shopify.queryParams[decodeURIComponent(aKeyValue[0])] = decodeURIComponent(aKeyValue[1]);
            }
          }
        }

        $(function() {
          $('#SortBy')
            .val(theme.strings.sortBy)
            .bind('change', function() {
              Shopify.queryParams.sort_by = $(this).val();
              location.search = $.param(Shopify.queryParams);
            }
          );
        });
      },

      collectionTags: function() {
        var $browseBy = $('#BrowseBy');
        $(function() {
          $browseBy
            .bind('change', function() {
              location.href = $browseBy.val();
            }
          );
        });
      }
    });

    return Collection;
  })();

  theme.ListCollections = (function() {
    function ListCollections(container) {
      this.$container = $(container);

      this.selectors = {
        collectionGridImages: '.grid-link__image--collection'
      };

      this.$collectionGridImages = $(this.selectors.collectionGridImages, this.$container);
      
      this.init();
    }
    
    ListCollections.prototype = _.assignIn({}, ListCollections.prototype, {
      init: function() {
        theme.cacheSelectors();
        theme.equalHeights(this.$collectionGridImages);
      }
    });

    return ListCollections;
  })();

  theme.Cart = (function() {
    var selectors = {
      body: 'body',
      cartSection: '#CartSection',
      cartForm: 'form[action="/cart"]',
      cartNoCookies: 'cart--no-cookies',
      cartQuantity: '.cart__quantity-selector'
    };

    function Cart() {
      if (!cookiesEnabled()) {
        $(selectors.cartSection).addClass(selectors.cartNoCookies);
      }

      /* Update cart page on blur of quantity input only if the quantity gets changed */
      /*==========================*/ 
      $(selectors.cartQuantity).on('focus', function(){
        var $this = $(this);
        var ogQty = $this.val();

        $this.one('blur', function(event) {
          if(ogQty != $this.val()){
            $(selectors.cartForm).submit();  
          }
        });
      });
    }

    function cookiesEnabled() {
      var cookieEnabled = navigator.cookieEnabled;

      if (!cookieEnabled){
        document.cookie = 'testcookie';
        cookieEnabled = (document.cookie.indexOf('testcookie') !== -1);
      }
      return cookieEnabled;
    }

    return Cart;
  })();

  theme.Header = (function() {
    function Header() {
      this.selectors = {
        // mobileNav: '#MobileNav'
      };

      this.init();
    }

    Header.prototype = _.assignIn({}, Header.prototype, {
      init: function() {
        this.cacheSelectors();
      },

      cacheSelectors: function() {
        // window.cache = window.cache || {};
        // $.extend(window.cache, {
        //   $mobileNav: $(this.selectors.mobileNav)
        // });
      },

    });

    return Header;
  })();

  // Top section on the homepage with slider background and blocks
  theme.HeroSection = (function() {
    function HeroSection(container) {

      this.selectors = {
        slider:       '.hero__background-slider',
        slide:        '.hero__background-slide',
        videoBlock:   '.hero__content-video',
        videoWrapper: '.video-wrapper'
      }

      // Initialize video
      var i;
      var $videoBlocks = $(this.selectors.videoBlock);

      if($videoBlocks.length){
        i = Math.floor(Math.random() * $videoBlocks.length);
        this.displayVideo( $videoBlocks.eq(i) );
      }

      // Initialize the slider
      var $slider = $(this.selectors.slider);
      var sliderArgs = {
        selector: ".hero__background-slides > .hero__background-slide",
        slideshowSpeed: $slider.data('speed') || 5000,
        animationSpeed: 2000,
        keyboard: false,
        controlNav: false,
        directionNav: false,
        touch: false,
        smoothHeight: true,
        before: function(slider) {
          $(slider).resize();
        }
      }

      if ($slider.length) {

        if ($slider.find(this.selectors.slide).length === 1) {
          sliderArgs.slideshow = false;
          sliderArgs.slideshowSpeed = 0;
        }

        $slider.flexslider(sliderArgs);
      
        $(window).on('resize', afterResize(function() {
            $slider.data('flexslider').resize();
          }, 250, 'resize-slideshow')
        );

      }

    }

    return HeroSection;
  })();

  theme.HeroSection.prototype = _.assignIn({}, theme.HeroSection.prototype, {
    onBlockSelect: function(evt) {
      this.displayVideo($(evt.target))
    },
    displayVideo: function($videoBlock){
      
      if( !$videoBlock ) return;

      var playerHtml;

      if($videoBlock.data('video-id')){
        playerHtml = '<iframe src="//player.vimeo.com/video/' + $videoBlock.data('video-id') + '?color=ec008c&byline=0&portrait=0&badge=0&title=0" frameborder="0" allowfullscreen></iframe>';
      }
      else {
        playerHtml = '<p style="text-align:center">Add a Vimeo link and the video will show up here</p>';
      }
      
      $(this.selectors.videoBlock).removeClass('is-current').find(this.selectors.videoWrapper).empty();
      $videoBlock.find(this.selectors.videoWrapper).html(playerHtml);
      $videoBlock.addClass('is-current');
    }
  });

  theme.slideshows = {};

  theme.SlideshowSection = (function() {
    function SlideshowSection(container) {
      this.$container = $(container);
      var id = this.$container.attr('data-section-id');
      var slideshow = this.slideshow = '#flexslider--' + id;

      theme.slideshows[slideshow] = new theme.Hero(slideshow);
    }

    return SlideshowSection;
  })();

  theme.SlideshowSection.prototype = _.assignIn({}, theme.SlideshowSection.prototype, {
    onUnload: function() {
      delete theme.slideshows[this.slideshow];
    },

    onBlockSelect: function(evt) {
      var $slideshow = $(this.slideshow);
      var $slide = $('#slide--' + evt.detail.blockId + ':not(.clone)');
      var slideIndex = $slide.data('flexslider-index');
      var $slideImg = $slide.find('img');
      $slideshow.flexslider(slideIndex, true);
      
      $slideImg.on('load', function(){
        var intervalAttempts = 0;
        
        // Needed to resize the slider as the on('load') listener doesn't wait until the image has loaded.
        var imageHeightCheck = setInterval(function() {
          intervalAttempts++;
          if ($slideImg.length && $slideImg.height() === 0 && intervalAttempts < 10)  {
            sizeSlideshow($slideshow);
          } else {
            // clear interval
            sizeSlideshow($slideshow);
            clearInterval(imageHeightCheck);
          }
        }, 500);
      });
      
      function sizeSlideshow($slideshow) {
        $slideshow.resize();
      }
    },

    onBlockDeselect: function() {
      // Resume autoplay
      $(this.slideshow).flexslider("play");
    }
  });

  theme.CollectionList = (function() {
    function CollectionList(container) {
      this.$container = $(container);
      var id = this.$container.attr('data-section-id');

      this.selectors = {
        collectionGridImages: '.grid-link__image--collection'
      };

      this.$collectionGridImages = $(this.selectors.collectionGridImages, this.$container);

      this.init();
    }
    
    CollectionList.prototype = _.assignIn({}, CollectionList.prototype, {
      init: function() {
        theme.cacheSelectors();
        theme.equalHeights(this.$collectionGridImages);
      }
    });

    return CollectionList;
  })();

  theme.FeaturedProducts = (function() {
    function FeaturedProducts(container) {
      this.$container = $(container);
      var id = this.$container.attr('data-section-id');

      this.selectors = {
        productGridImages: '.grid-link__image--product'
      };

      this.$productGridImages = $(this.selectors.productGridImages, this.$container);
      
      this.init();
    }
    
    FeaturedProducts.prototype = _.assignIn({}, FeaturedProducts.prototype, {
      init: function() {
        theme.cacheSelectors();
        theme.equalHeights(this.$productGridImages);
      }
    });

    return FeaturedProducts;
  })();

  window.theme = window.theme || {};

  theme.PasswordHeader = (function() {
    function PasswordHeader() {
      this.init();
    }
    
    PasswordHeader.prototype = _.assignIn({}, PasswordHeader.prototype, {
      init: function() {
        $('.js-toggle-login-modal').magnificPopup({
          type: 'inline',
          mainClass: 'mfp-fade',
          closeOnBgClick: false,
          closeBtnInside: false,
          closeOnContentClick: false,
          tClose: password.strings.pageClose,
          removalDelay: 500,
          callbacks: {
            open: function() {
              window.setTimeout( function() { document.getElementById('password').focus(); }, 50 );
            }
          }
        });
        if ( $('.storefront-password-form .errors').size() ) {
          $('.js-toggle-login-modal').click();
        }
      }
    });
    
    return PasswordHeader;
  })();

  theme.Footer = (function() {
    function Footer() {
      this.selectors = {
        taglines: '.site-footer__taglines p'
      };
      this.init();
    }
    
    Footer.prototype = _.assignIn({}, Footer.prototype, {
      init: function() {
        var $taglines = $(this.selectors.taglines);
        var taglineCount = $taglines.length;
        var i = 0;

        if(taglineCount > 0){
          i = Math.floor(Math.random() * taglineCount); // Get a random tagline to display
          $taglines.filter(function(index) {
            return i === index; // Since all taglines are hidden by default, show only this random one 
          }).addClass('is-visible');
        }
      }
    });
    
    return Footer;
  })();

  theme.VideoPage = (function() {
    function VideoPage() {

      this.player;
      this.selectors = {
        videoItem: '.media-list__video[data-video-id]',
        videoContainer: '.video-target',
        videoCaption: '.video-caption[data-video-id]'
      };

      this.init();
    }
    
    VideoPage.prototype = _.assignIn({}, VideoPage.prototype, {
      init: function() {
        
        $(this.selectors.videoItem).on('click', this.onVideoItemClick.bind(this));

        $(function(){
          this.displayVideo( $(this.selectors.videoItem).first().data('video-id') );
        }.bind(this));
      },
      _createPlayer: function(container, id){

        var player;
        var options = {
          id       : id,
          byline   : false,
          portrait : false,
          color    : 'ec008c'
        };

        player = new Vimeo.Player(container, options);

        player.on('ended', this.onPlayerEnded.bind(this));

        return player;
      },
      onPlayerEnded: function(e){},
      onBlockSelect: function(e){
        // var $block = $('#video-block--' + e.detail.blockId);
        // var videoId = $block.data('video-id');

        // console.log($block);
      },
      displayVideo: function(id){
        
        var self     = this;
        var $item    = $('.media-list__video[data-video-id="' + id + '"]');
        var $caption = $('.video-caption[data-video-id="' + id + '"]')

        if(id && $item.length){
          if(!this.player){
            $(this.selectors.videoContainer).empty();
            this.player = this._createPlayer($(this.selectors.videoContainer).get(0), id);
          }
          else {
            // Auto play the video since this isn't the first video we're showing, they must have clicked on it
            this.player.loadVideo(id).then(function(id) {
              self.player.play();
            });
          }

          // Update the dom to show which video we're playing
          $(this.selectors.videoItem).removeClass('is-current');
          $(this.selectors.videoCaption).removeClass('is-current');
          $item.addClass('is-current');
          $caption.addClass('is-current');
        }

      },
      onVideoItemClick: function(e){

        this.displayVideo( $(e.delegateTarget).data('video-id') );

        return false;
      }
    });
    
    return VideoPage;
  })();

  theme.AnalogPage = (function() {
    function AnalogPage() {

      this.selectors = {
        listItem: 'li[data-block-id]',
        block:    '.analog-block[data-block-id]'
      };

      this.init();
    }

    AnalogPage.prototype = _.assignIn({}, AnalogPage.prototype, {
      init: function() {
        
        $(this.selectors.listItem).on('click', this.onListItemClick.bind(this));

        $(function(){
          this.displayBlock( $(this.selectors.block).first().data('block-id') );
        }.bind(this));
      },
      onListItemClick: function(e){
        
        this.displayBlock( $(e.delegateTarget).data('block-id') );

        return false;
      },
      displayBlock: function(blockID){
        if(typeof blockID == "undefined") return;

        var $li    = $(this.selectors.listItem).filter('[data-block-id="'+ blockID +'"]');
        var $block = $(this.selectors.block).filter('[data-block-id="'+ blockID +'"]');

        // Load images for the block if there are any
        if($block.find('img[data-src]').length){
          $block.find('img[data-src]').each(function(index, el) {
            var src = $(this).data('src');
            $(this).attr('src', src).removeAttr('data-src');
          });
        }
        
        $(this.selectors.listItem).removeClass('is-current');
        $(this.selectors.block).removeClass('is-current');
        $li.addClass('is-current');
        $block.addClass('is-current');
      }
    });

    return AnalogPage;
  })();

  $(document).ready(function() {
    var sections = new theme.Sections();

      sections.register('product-template', theme.Product);
      sections.register('collection-template', theme.Collection);
      sections.register('list-collections-template', theme.ListCollections);
      sections.register('cart-template', theme.Cart);
      sections.register('article-template', theme.Article);
      sections.register('header-section', theme.Header);
      sections.register('hero-section', theme.HeroSection);
      sections.register('slideshow-section', theme.SlideshowSection);
      sections.register('collection-list-section', theme.CollectionList);
      sections.register('featured-products-section', theme.FeaturedProducts);
      sections.register('password-header', theme.PasswordHeader);
      sections.register('footer-section', theme.Footer);
      sections.register('page-video', theme.VideoPage);
      sections.register('page-analog', theme.AnalogPage);
  });

  theme.cacheSelectors = function () {
    theme.cache = {
      // General
      $w: $(window),
      $html: $('html')
    }
  };

  timber.cacheVariables = function () {
    timber.vars = {
      isTouch: timber.cache.$html.hasClass('supports-touch')
    }
  };

  theme.init = function () {
    theme.cacheSelectors();
    timber.cacheVariables();
    theme.fixExternalLinks();
  };

  theme.equalHeights = function ($selector) {
    theme.cache.$w.on('load', resizeElements($selector));

    theme.cache.$w.on('resize',
      afterResize(function() {
        resizeElements($selector);
      }, 250, 'equal-heights')
    );

    function resizeElements($selector) {
      $selector.imagesLoaded(function() {
        $selector.css('height', 'auto').equalHeights();
      });
    }
  };

  // Open all external links in a new window
  theme.fixExternalLinks = function(){
    $('a').not('[href*="mailto:"]').each(function () {
      var isInternalLink = new RegExp('/' + window.location.host + '/');
      if ( !isInternalLink.test(this.href) ) {
        $(this).attr('target', '_blank');
      }
    });
  };

  // Initialize theme's JS on docready
  $(theme.init);

})(jQuery, enquire, _, FastClick, imagesLoaded, respond, Vimeo);
